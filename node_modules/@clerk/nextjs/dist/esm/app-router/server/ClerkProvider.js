import "../../chunk-BUSYA2B4.js";
import { headers } from "next/headers";
import React from "react";
import { PromisifiedAuthProvider } from "../../client-boundary/PromisifiedAuthProvider";
import { getDynamicAuthData } from "../../server/buildClerkProps";
import { canUseKeyless__server } from "../../utils/feature-flags";
import { mergeNextClerkPropsWithEnv } from "../../utils/mergeNextClerkPropsWithEnv";
import { isNext13 } from "../../utils/sdk-versions";
import { ClientClerkProvider } from "../client/ClerkProvider";
import { buildRequestLike, getScriptNonceFromHeader } from "./utils";
const getDynamicClerkState = React.cache(async function getDynamicClerkState2() {
  const request = await buildRequestLike();
  const data = getDynamicAuthData(request);
  return data;
});
const getNonceFromCSPHeader = React.cache(async function getNonceFromCSPHeader2() {
  return getScriptNonceFromHeader((await headers()).get("Content-Security-Policy") || "") || "";
});
async function ClerkProvider(props) {
  const { children, dynamic, ...rest } = props;
  let statePromise = Promise.resolve(null);
  let nonce = Promise.resolve("");
  if (dynamic) {
    if (isNext13) {
      statePromise = Promise.resolve(await getDynamicClerkState());
      nonce = Promise.resolve(await getNonceFromCSPHeader());
    } else {
      statePromise = getDynamicClerkState();
      nonce = getNonceFromCSPHeader();
    }
  }
  const propsWithEnvs = mergeNextClerkPropsWithEnv({
    ...rest
  });
  let output = /* @__PURE__ */ React.createElement(
    ClientClerkProvider,
    {
      ...mergeNextClerkPropsWithEnv(rest),
      nonce: await nonce,
      initialState: await statePromise
    },
    children
  );
  const shouldRunAsKeyless = !propsWithEnvs.publishableKey && canUseKeyless__server;
  if (shouldRunAsKeyless) {
    const newOrReadKeys = await import("../../server/keyless-node.js").then((mod) => mod.createOrReadKeyless());
    if (newOrReadKeys) {
      const KeylessCookieSync = await import("../client/keyless-cookie-sync.js").then((mod) => mod.KeylessCookieSync);
      output = /* @__PURE__ */ React.createElement(KeylessCookieSync, { ...newOrReadKeys }, /* @__PURE__ */ React.createElement(
        ClientClerkProvider,
        {
          ...mergeNextClerkPropsWithEnv({
            ...rest,
            publishableKey: newOrReadKeys.publishableKey,
            __internal_claimKeylessApplicationUrl: newOrReadKeys.claimUrl,
            __internal_copyInstanceKeysUrl: newOrReadKeys.apiKeysUrl
          }),
          nonce: await nonce,
          initialState: await statePromise
        },
        children
      ));
    }
  }
  if (dynamic) {
    return (
      // TODO: fix types so AuthObject is compatible with InitialState
      /* @__PURE__ */ React.createElement(PromisifiedAuthProvider, { authPromise: statePromise }, output)
    );
  }
  return output;
}
export {
  ClerkProvider
};
//# sourceMappingURL=ClerkProvider.js.map